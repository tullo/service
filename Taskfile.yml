# https://taskfile.dev

version: '3'

tasks:

  default:
    cmds:
      - task run-checks
      - task build
    silent: true

  run-checks:
    cmds:
      - go vet ./app/... ./business/... ./foundation/...
      - staticcheck -go 'module' ./app/... ./business/... ./foundation/...
    silent: true

  build:
    cmds:
      - go mod vendor
      - go build -race -mod=vendor ./...
    silent: true

  build-all:
    cmds:
      - go mod vendor
      - go build -v -race -mod=vendor ./...
      - task: build-sales-admin
      - task: build-sales-api
      - task: build-metrics
    silent: true

  build-sales-admin:
    dir: app/sales-admin
    cmds:
      - go build -v -race -mod=vendor
      - ls -lh | grep sales-admin
      - rm sales-admin
    silent: true

  build-sales-api:
    dir: app/sales-api
    cmds:
      - go build -v -race -mod=vendor
      - ls -lh | grep sales-api
      - rm sales-api
    silent: true

  build-metrics:
    dir: app/sidecar/metrics
    cmds:
      - go build -v -race -mod=vendor
      - ls -lh | grep metrics
      - rm metrics
    silent: true

  test:
    deps: [clean-database-data, start-cockroach]
    cmds:
      - sh ./ci/test.sh
      - defer: { task: stop-cockroach }
    silent: false
    
  start-cockroach:
    deps: [cockroach-binary, certs, clean-testcache]
    desc: Starts the CockroachDB server in single-node mode
    cmds:
      # pgrep returns:
      # 0 : One or more processes matched the criteria.
      # 1 : No processes matched or none of them could be signalled
      - >
        PID=$(pgrep cockroach) || true &&
        if [[ -n "$PID" ]]; then
          echo "‚ö†Ô∏è CockroachDB server is already running (PID=$RESULT), Stop it first!"
        else
          echo "üöÄ Starting the CockroachDB server!"
          ${PWD}/cockroach start-single-node --certs-dir=certs --store=./cockroach-data --sql-addr=:26257 --listen-addr=:26258 --advertise-addr $(hostname) --http-addr=localhost:8080 --background
          ${PWD}/cockroach node status --certs-dir=certs --host=$(hostname)
        fi
    requires:
      vars: [DATABASE_URL]
    silent: true

  stop-cockroach:
    desc: Stops the CockroachDB server
    deps: [cockroach-binary]
    cmds:
      - >
        PID=$(pgrep cockroach) || true &&
        if [[ -n "$PID" ]]; then
          echo "‚ö†Ô∏è killing cockroach process $(pgrep cockroach)"
          ${PWD}/cockroach node drain --certs-dir=certs --host=$(hostname):26258 --self --shutdown
        fi
      - defer: { task: clean-database-data }
    requires:
      vars: [DATABASE_URL]
    silent: true

  cockroach-binary:
    cmds:
      - wget https://binaries.cockroachdb.com/cockroach-v25.1.2.linux-amd64.tgz
      - tar -xf cockroach-v25.1.2.linux-amd64.tgz cockroach-v25.1.2.linux-amd64/cockroach
      - mv cockroach-v25.1.2.linux-amd64/cockroach cockroach
      - rm -rf cockroach-v25.1.2.linux-amd64*
    status:
      - test -f cockroach
  
  clean-database-data:
    cmds:
      - rm -rf cockroach-data

  clean-testcache:
    cmds:
      - go clean -testcache

  certs:
    deps: [cockroach-binary]
    cmds:
      - mkdir certs my-safe-directory
      - $PWD/cockroach cert create-ca --certs-dir=certs --ca-key=my-safe-directory/ca.key
      - $PWD/cockroach cert create-node localhost $(hostname) --certs-dir=certs --ca-key=my-safe-directory/ca.key
      - $PWD/cockroach cert create-client root --certs-dir=certs --ca-key=my-safe-directory/ca.key
      - $PWD/cockroach --certs-dir=certs cert list
    status:
      - test -d certs
      - test -d my-safe-directory

  go-deps-list:
    cmds:
      - go list -mod=mod all

  go-deps-reset:
    cmds:
      - git checkout -- go.mod
      - defer: { task: go-tidy }
    silent: true

  go-deps-clean-modcache:
    cmds:
      - go clean -modcache

  go-deps-upgrade:
    cmds:
      - go get -u -t -v ./...
      - defer: { task: go-tidy }

  go-tidy:
    cmds:
      - go mod tidy
      - go mod vendor
    silent: true

  go-api-config:
    cmds:
      - go run ./app/sales-api -h
    silent: true

  go-api-run:
    cmds:
      - |
        go run ./app/sales-api \
          --db-disable-tls=1 \
          --auth-keys-folder=deployment/keys \
          --zipkin-reporter-uri=http://$(hostname):9411/api/v2/spans \
          --zipkin-probability=1
    silent: true

  go-metrics-run:
    cmds:
      - go run ./app/sidecar/metrics \
          --collect-from=http://$(hostname):4000/debug/vars
    silent: true

  curl-endpoints:
    cmds:
      - task: curl-api-endpoint
      - task: curl-api-debug-endpoint
      - task: curl-api-expvar-endpoint
      - task: curl-metrics-debug-endpoint
      - task: curl-metrics-expvar-endpoint
    silent: false

  curl-api-endpoint:
    cmds:
      - curl -I http://$(hostname):3001/v1/health
    silent: false

  curl-api-debug-endpoint:
    cmds:
      - curl -I http://$(hostname):4000/debug/pprof/
    silent: false

  curl-api-expvar-endpoint:
    cmds:
      - curl -I http://$(hostname):4000/debug/vars
    silent: false

  curl-metrics-debug-endpoint:
    cmds:
      - curl -I http://$(hostname):4001/debug/pprof/
    silent: false

  curl-metrics-expvar-endpoint:
    cmds:
      - curl -I http://$(hostname):3001/metrics
    silent: false
